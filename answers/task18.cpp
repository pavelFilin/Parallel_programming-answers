#include <stdio.h>
#include <omp.h>

int main(int argc, char *argv[])
{//Смысл программы- демонстрация работы средств синхронизации-блокировок.Все создаваемые потоки по очереди выведут 
   //сообщения «Begin work» и «End work». Между этими двумя сообщениями от одного потока могут встретиться
   //сообщения от других потоков, выводимых при неудачной попытке войти в закрытую секцию.
   omp_lock_t lock;//Простые блокировки (omp_lock_t) не могут быть установлены более одного раза, даже тем же потоком. 
   int n;
   omp_init_lock(&lock);//Инициализируется переменная блокировки типа omp_lock_t
#pragma omp parallel private (n) //Открытие параллельного блока
   {
      n=omp_get_thread_num();//Присваивание переменной значения номера потока
      while (!omp_test_lock (&lock))//неблокирующая попытка захвата замка. Данная функция пробует захватить указанный замок.
         //Если это удалось, то для простого замка функция возвращает 1. Если замок захватить не удалось, то возвращается 0.
      {
         printf("Секция закрыта, нить %d\n", n);
         sleep(2);
      }
      printf("Начало закрытой секции, нить %d\n", n);
      sleep(5);
      printf("Конец закрытой секции, нить %d\n", n);
      omp_unset_lock(&lock); //Снятие блокировки
   }
   omp_destroy_lock(&lock);//Освобождение переменной блокировки типа omp_lock_t
}
